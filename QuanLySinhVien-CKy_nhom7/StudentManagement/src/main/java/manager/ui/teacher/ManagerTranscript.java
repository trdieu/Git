/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package manager.ui.teacher;

import java.awt.Color;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import javax.swing.BorderFactory;
import javax.swing.border.Border;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import manager.control.AcademicTranscriptControl;
import manager.entity.AcademicTranscriptEntity;

/**
 *
 * @author Dell
 */
public class ManagerTranscript extends javax.swing.JPanel {
    private int flag = 0;
    private AcademicTranscriptControl academicTranscriptControl;

    /**
     * Creates new form ManagerTranscript
     */
    public ManagerTranscript() {
        academicTranscriptControl = new AcademicTranscriptControl();
        initComponents();
        initTranscriptTable();
    }

    public void initTranscriptTable() {
        JTableHeader header = transcriptTable.getTableHeader();
        header.setOpaque(false);
        header.setBackground(new Color(72, 3, 111));
        header.setForeground(Color.white);
        header.setFont(new java.awt.Font("SansSerif", 1, 14));
        transcriptScroll.getViewport().setBackground(Color.WHITE);
        Border border = BorderFactory.createEmptyBorder(0, 0, 0, 0);
        transcriptScroll.setViewportBorder(border);
        transcriptScroll.setBorder(border);
    }

    private void displayTrancript(List<AcademicTranscriptEntity> resultList) {
        Vector<String> tableHeaders = new Vector<String>();
        Vector tableData = new Vector();
        tableHeaders.add("Học kỳ");
        tableHeaders.add("Mã HP");
        tableHeaders.add("Tên HP");
        tableHeaders.add("TC");
        tableHeaders.add("Lớp học");
        tableHeaders.add("Mssv");
        tableHeaders.add("Điểm QT");
        tableHeaders.add("Điểm thi");
        tableHeaders.add("Điểm chữ");

        for (int i = 0; i < resultList.size(); i++) {
            AcademicTranscriptEntity student = (AcademicTranscriptEntity) resultList.get(i);
            Vector<Object> oneRow = new Vector<Object>();
            oneRow.add(student.getHocKy());
            oneRow.add(student.getMaHp());
            oneRow.add(student.getTenHp());
            oneRow.add(student.getTc());
            oneRow.add(student.getMaLopDK());
            oneRow.add(student.getMssv());
            oneRow.add(student.getDiemQt());
            oneRow.add(student.getDiemCk());
            oneRow.add(student.getDiemChu());
            tableData.add(oneRow);
        }
        transcriptTable.setModel(new DefaultTableModel(tableData, tableHeaders) {
            Class[] types = new Class[]{
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Float.class, java.lang.Float.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean[]{
                false, false, false, false, false, false, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        });
    }
    
    public void reset() {
        statusLabel.setText(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        headerPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        classCodeLabel = new javax.swing.JLabel();
        classCodeTextField = new javax.swing.JTextField();
        studentCodeLabel = new javax.swing.JLabel();
        studentCodeTextField = new javax.swing.JTextField();
        updateButton = new manager.ui.ButtonLabel(new java.awt.Color(85,55,118), null);
        statusLabel = new javax.swing.JLabel();
        transcriptScroll = new javax.swing.JScrollPane();
        transcriptTable = new javax.swing.JTable();

        setPreferredSize(new java.awt.Dimension(1020, 565));

        headerPanel.setBackground(new java.awt.Color(110, 89, 222));
        headerPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 5, 13));

        jLabel1.setFont(new java.awt.Font("SansSerif", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Nhập điểm");
        headerPanel.add(jLabel1);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        classCodeLabel.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        classCodeLabel.setForeground(new java.awt.Color(54, 33, 89));
        classCodeLabel.setText("Mã lớp:");

        classCodeTextField.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        classCodeTextField.setForeground(new java.awt.Color(54, 33, 89));
        classCodeTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                classCodeTextFieldActionPerformed(evt);
            }
        });

        studentCodeLabel.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        studentCodeLabel.setForeground(new java.awt.Color(54, 33, 89));
        studentCodeLabel.setText("Mã sinh viên:");

        studentCodeTextField.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        studentCodeTextField.setForeground(new java.awt.Color(54, 33, 89));
        studentCodeTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                studentCodeTextFieldActionPerformed(evt);
            }
        });

        updateButton.setBackground(new java.awt.Color(64, 43, 100));
        updateButton.setForeground(new java.awt.Color(255, 255, 255));
        updateButton.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        updateButton.setText("Cập nhật điểm");
        updateButton.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        updateButton.setOpaque(true);
        updateButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                updateButtonMousePressed(evt);
            }
        });

        statusLabel.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        statusLabel.setForeground(new java.awt.Color(54, 33, 89));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(classCodeLabel)
                    .addComponent(studentCodeLabel))
                .addGap(37, 37, 37)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(classCodeTextField)
                    .addComponent(studentCodeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(136, 136, 136)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(updateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(statusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(23, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(classCodeLabel)
                    .addComponent(classCodeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(updateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(studentCodeLabel)
                        .addComponent(studentCodeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(statusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20))
        );

        transcriptTable.setAutoCreateRowSorter(true);
        transcriptTable.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        transcriptTable.setForeground(new java.awt.Color(54, 33, 89));
        transcriptTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Học kỳ", "Mã HP", "Tên HP", "TC", "Lớp học", "Mssv", "Điểm QT", "Điểm thi", "Điểm chữ"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Float.class, java.lang.Float.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        transcriptTable.setGridColor(new java.awt.Color(204, 204, 255));
        transcriptScroll.setViewportView(transcriptTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(headerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(transcriptScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 1020, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(headerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(transcriptScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 393, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void classCodeTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_classCodeTextFieldActionPerformed
        flag = 1;
        String classCode = classCodeTextField.getText();
        if (classCode.equals("")) {
            return;
        }
        List<AcademicTranscriptEntity> resultList = academicTranscriptControl.getTranscriptForTeacherCc(classCode);
        displayTrancript(resultList);
    }//GEN-LAST:event_classCodeTextFieldActionPerformed

    private void studentCodeTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_studentCodeTextFieldActionPerformed
        flag = 2;
        String studentCode = studentCodeTextField.getText();
        if (studentCode.equals("")) {
            return;
        }
        List<AcademicTranscriptEntity> resultList = academicTranscriptControl.getTranscriptForTeacherSc(studentCode);
        displayTrancript(resultList);
    }//GEN-LAST:event_studentCodeTextFieldActionPerformed

    private void updateButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_updateButtonMousePressed
        String classCode = classCodeTextField.getText();
        String studentCode = studentCodeTextField.getText();
        if(classCode.equals("") && studentCode.equals("")) {
            return;
        }
        
        ArrayList<AcademicTranscriptEntity> list = new ArrayList<AcademicTranscriptEntity>();
        DefaultTableModel dm = (DefaultTableModel) transcriptTable.getModel();
        int rowCount = dm.getRowCount();
        AcademicTranscriptEntity entity = new AcademicTranscriptEntity();
        for (int i = rowCount - 1; i >= 0; i--) {
            entity.setMssv((String) dm.getValueAt(i, 5));
            entity.setMaLopDK((String) dm.getValueAt(i, 4));
            entity.setDiemQt((Float) dm.getValueAt(i, 6));
            entity.setDiemCk((Float) dm.getValueAt(i, 7));

            list.add(entity);

        }
        academicTranscriptControl.updateTranscript(list);
        statusLabel.setForeground(Color.green);
        statusLabel.setText("Cập nhật điểm thành công.");
        List<AcademicTranscriptEntity> resultList;
        switch(flag) {
            case 1:
                resultList = academicTranscriptControl.getTranscriptForTeacherCc(classCode);
                displayTrancript(resultList);
                break;
            case 2:
                resultList = academicTranscriptControl.getTranscriptForTeacherSc(studentCode);
                displayTrancript(resultList);
                break;
        }
    }//GEN-LAST:event_updateButtonMousePressed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel classCodeLabel;
    private javax.swing.JTextField classCodeTextField;
    private javax.swing.JPanel headerPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel statusLabel;
    private javax.swing.JLabel studentCodeLabel;
    private javax.swing.JTextField studentCodeTextField;
    private javax.swing.JScrollPane transcriptScroll;
    private javax.swing.JTable transcriptTable;
    private manager.ui.ButtonLabel updateButton;
    // End of variables declaration//GEN-END:variables
}
