
import static java.lang.Thread.sleep;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Dell
 */
public class TestPause extends javax.swing.JFrame {

    class DigitalWatch implements Runnable {

        private volatile boolean threadSuspended = false;
        Thread thread = null;
        Date startTime = null;
        String timeString = "";
        JButton button;

        DigitalWatch() {
            thread = new Thread(this);
            button = new JButton();
            add(button);
            thread.start();
        }

        public void reset() {
            Calendar cal = Calendar.getInstance();
            startTime = cal.getTime();
        }

        public void run() {
            reset();

            while (true) {
                Calendar cal = Calendar.getInstance();
                Date currentTime = cal.getTime();
                long time = (currentTime.getTime() - startTime.getTime()) / 1000;
                long second = time % 60, hour = (time / 3600), minute = (time / 60) % 60;
                String s = Long.toString(second), h = Long.toString(hour), m = Long.toString(minute);

                if (second < 10) {
                    s = "0" + s;
                }
                if (hour < 10) {
                    h = "0" + h;
                }
                if (minute < 10) {
                    m = "0" + m;
                }

                timeString = h + ":" + m + ":" + s;

                printTime();
                try {
                    sleep(1000);
                } catch (InterruptedException ex) {
                    Logger.getLogger(TestPause.class.getName()).log(Level.SEVERE, null, ex);
                }

                if (threadSuspended) {
                    synchronized (this) {
                        while (threadSuspended) {
                            try {
                                wait();
                            } catch (InterruptedException ex) {
                                Logger.getLogger(TestPause.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                    }
                }

            }
        }
    

    public void printTime() {
        button.setText(timeString);
    }

    public synchronized void pause() {

        threadSuspended = !threadSuspended;

        if (!threadSuspended) {
            notify();
        }
    }
}
private DigitalWatch watch;

    /**
     * Creates new form TestPause
     */
    private synchronized void jButton1MouseClicked(java.awt.event.MouseEvent evt) {
        evt.consume();
        watch.pause();

    }

    public TestPause() {
        initComponents();
        drawTime();
        JButton button = new JButton();
        add(button);
        button.setText("Pause");
        button.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });
    }

    public void drawTime() {
        watch = new DigitalWatch();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new java.awt.FlowLayout());

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                

}
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TestPause.class
.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        

} catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TestPause.class
.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        

} catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TestPause.class
.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        

} catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TestPause.class
.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TestPause().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
